
#Инициализация драйвера
https://www.selenium.dev/downloads/- драйверы скачать тут
Фолдер, где лежат драйверы нужно добавить в PATH
Проверить: echo %PATH%
Переименовывать драйвер нельзя!
Затем можно проверить с помощью where chromedriver
В этом случае setProperty не нужен

C:\Users\MKU>where chromedriver
C:\SeleniumDrivers\chromedriver.exe


Второй вариант инициализации-  явно прописать в Property:
  System.setProperty("webdriver.chrome.driver", "C:\\Users\\MKU\\seleniumlearning\\resources\\chromedriver.exe");
//fist part- just copy as is, second part- specify path to chromedriver


//Инициализация драйверов разных
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
//...
WebDriver chromeDriver = new ChromeDriver();
WebDriver ieDriver = new InternetExplorerDriver();
WebDriver firefoxDriver = new FirefoxDriver();


#capabilities
dismiss unexpected browser alerts
set proxy

//dismiss unexpected browser alerts and print all capabilities
//(Chrome says use ChromeOptions instead if this)
DesiredCapabilities caps = new DesiredCapabilities();
caps.setCapability("unexpectedAlertBehaviour", "dismiss");
driver = new ChromeDriver(caps);
System.out.println(((HasCapabilities) driver).getCapabilities());


Список Capabilities
https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities

#command line options
можно передавать опции браузера через комманды
ChromeOptions options = new ChromeOptions();
options.addArguments("start-fulscreen");
options затем нужно передать в конструктор браузера и он будет преобразован в capabilities

#Как передать одновременнно options и capabilities
ChromeOptions options = new ChromeOptions();
options.addArguments("start-fulscreen");
DesiredCapabilities caps = new DesiredCapabilities();
caps.setCapability(ChromeOptions.CAPABILITY, options);
driver = new ChromeDriver(caps);


Опции командной строки Firefox: https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options
Опции командной строки Internet Explorer: https://msdn.microsoft.com/ru-ru/library/hh826025(v=vs.85).aspx


#Chrome specific:

https://sites.google.com/a/chromium.org/chromedriver/capabilities

ChromeOptions options = new ChromeOptions();
Chrome:
add extensions
Use custom profile (also called user data directory)
Block pop-up windows
Set download directory

Опции командной строки Chrome: http://peter.sh/experiments/chromium-command-line-switches/


#Работа с cookies
Зачем:
чтобы присоединиться к старой сессии
вход через сторонние сервисы
удалить чтобы очистить сессию (альтернатива перезауска браузера)

import org.openqa.selenium.Cookie;
//...
driver.manage().addCookie(new Cookie("test", "test"));
Cookie testCookie = driver.manage().getCookieNamed("test");
Set<Cookie> cookies = driver.manage().getCookies();
driver.manage().deleteCookieNamed("test");
driver.manage().deleteAllCookies();



#открытие страниц
driver.get("https://duckduckgo.com/");
протокол https указывать обязательно


#поиск элементов
findElement находит первый элемент с таким локатором.
Если не находит- no such element exception

findElements находит все элементы. Если ничего не находит, не выбрасывает исключение,а возвращает пустой список!

Проверять, что элемент действительно в нужном фрейме или окне!


StaleElementReferenceException= элемента с таким идентификатором больше нет.
findElement возвращает браузеру не элемемент, а объект + уникальный id элемента. При каждом действии селениум обращается к браузеру с этим id. Когда страница меняется- id будет новым, например при обновлении страницы- нужно заново искать элемент. Нужно по возможности искать элемент непосредственно перед использованием, чтобы избежать этого.

#refresh the list of webelements to avoid stale elements  exception
 List<WebElement> nestedLinks =driver.findElements(nestedLink);
            for (int j = 0; j < nestedLinks.size(); j++)  {
               nestedLinks.get(j).click();
                driver.findElement(title).isDisplayed();
                nestedLinks =driver.findElements(nestedLink);

            }





#поиск элементов
Правила:
1. искать элемент непосредственно перед использованием, иначе возможно StaleElementReferenceException
2. элемент должен быть видимым, иначе ElementNotVisibleException


#поиск элементов
Элементы ищутся не на странице, а прямо в дом.
Селениум получает ссылку на элемент, в виде уникального номера.
Перед каждым действием нужно искать элемент зановоб иначе инфа неактуальна.
После каждого изменения на странице- ссылки перестают работать.

CSS стратегии: id, tagName, className, cssSelector
WebElement form1 = driver.findElement(By.id("login-form"));
WebElement form2 = driver.findElement(By.tagName("form"));
WebElement form3 = driver.findElement(By.className("login"));
WebElement form4 = driver.findElement(By.cssSelector("form.login"));
WebElement form5 = driver.findElement(By.cssSelector("#login-form"));

Другие стратегии: name, linkText, paritalLinkText, xpath
WebElement field1 = driver.findElement(By.name("username"));
WebElement field2 = driver.findElement(By.xpath("//input[@name='username']"));
WebElement link = driver.findElement(By.linkText("Logout"));

List<WebElement> links = driver.findElements(By.tagName("a"));

Рекомендовано использовать CSS в первую очередь

CSS
Поиск по нескольким классам через точку
class1.class2.class3
Поиск в консоли:
$$("CSSLocator")
$x("xPath")

Шпаргалка по CSS:
http://www.w3schools.com/cssref/css_selectors.asp



xpath преимущества
движение вверх по дом: /../
поиск по тексту
подзапросы

Спецификация XPath 1.0 -- https://www.w3.org/TR/xpath/

Шпаргалки по XPath:
http://scraping.pro/5-best-xpath-cheat-sheets-and-quick-references/
https://www.simple-talk.com/dotnet/net-framework/xpath-css-dom-and-selenium-the-rosetta-stone/ (постер)


#Контекст поиска!
//начинаем с драйвера, ищем на странице
WebElement loginButton = driver.findElement(By.name("login"));

//начинаем с другого элемента, поиск внутри этого элемента
WebElement footer= driver.findElement(By.className("footer"));
WebElement loginButton1 =  footer.findElement((By.name("login")));


#поиск элемента если мы не уверены, есть ли элемент на странице-
либо обрабатываем исключение,
либо используем findElements, он вернет пустой список, если элемента нет

boolean isElementPresent(WebDriver driver, By locator) {
  try {
    driver.findElement(locator);
    return true;
  } catch (NoSuchElementException ex) {
    return false;
  }
}

boolean areElementsPresent(WebDriver driver, By locator) {
  return driver.findElements(locator).size() > 0;
}



#Ожидание появления элемента

// настройка неявных ожиданий
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
WebElement element = driver.findElement(By.name("q"));

// явное ожидание появления элемента
import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;
// ...
WebdriverWait wait = new WebDriverWait(driver, 10/*seconds*/);
WebElement element = wait.until(presenceOfElementLocated(By.name("q")));


#Поиск элементов при помощи JavaScript (protractor + angular)
List<WebElement> links = (List<WebElement>) ((JavascriptExecutor) driver)
  .executeScript("return $$('a:contains((someText)')");


#Получение свойств элементов
String href = link.getAttribute("href");

эта команда возвращает не value аттрибутов, а значения propierties.
propierties содержат в том числе и аттрибуты, но еще много чего
Смотри весь список в правой вкладке- propierties.
Например

Текстовое содержимое элемента:
textContent: "some text"
getAttribute("textContent")

Текст который был введен в поле ввода
getAttribute("value")
Еще есть getText, но в этом случае не подходит


Весь код элемента:
outerHTML
getAttribute("outerHTML")
Если проделать это с элементом body или html - получим код всей страницы

Адреса:
href, src
getAttribute("href")
селениум вернет полную ссылку, а не относительную

Булевские атрибуты:
selected
- вернет true если артибут присутсвует, null если отсутсвует
Значение атрибута не вернет
getAttribute("selected")



#Определение видимости элемента

if (button.isDisplayed()) {
  button.click();
}


isElementPresent проверяет присутвсвие (даже если элемент невидим),
isDisplayed - отображение



#Получение текста элемента
String txt = link.getText();
пытается получить тот текст, который видит пользователь
если элемент невидимый- текст будет пустым
если вложенный элемент невидимый- его текст тоже игнорируется

получить невидимый текст: getAttribute("textContent")

Текст который был введен в поле ввода + для элементов форм используем:
getAttribute("value")



#Получение стилей элемента
Лучше не пользоваться
String color = link.getCssValue("color");


#Размер и положение элемента
Point location = link.getLocation();
Dimension size = link.getSize();
// "два в одном" -размер и положение -- новый способ, который пока не все драйверы поддерживают
Rectangle rect = link.getRect();


#эта команда поможет проскролить до нужного элемента + снять координаты
(Locatable element).getCoordinates().inView()




#собрать элементы и сделать строки
//create a list of visible case Statuses and collect them to list os strings
     public List<String> getCaseStatuses(){

        List<WebElement> caseStatuses =  driver.findElements(caseStatus);
        return caseStatuses.stream().map(e->e.getText()).collect(Collectors.toList());
    }
//then use to compare with expected result
  @Then("Cases are filtered by status")
    public void casesAreFilteredByStatus() {

        var caseStatuses = allCasesPage.getCaseStatuses();
        for(String item:caseStatuses){
            System.out.println(item);
            assertTrue(item.equalsIgnoreCase(statusOption), "Status Filter problem");
        }
    }



#Действия с элементами

#link.click();
Когда кликнуть нельзя:
элемент исчез из дом
элемент неинтерактивный(невидимый)
элемент закрыт другим элементом


#sendKeys
import org.openqa.selenium.Keys;
//...
searchField.sendKeys("selenium" + Keys.ENTER);

// sendKeys -не удаляет текст, а ставит курсор в конец существующего текста
//Если есть шаблон типа как для номера телефона 8 (--)__-_____ (если в поле есть маска) -- надо перед вводом текста перейти в начало
dateField.sendKeys(Keys.HOME + "01.01.2001");


#Очистка поля ввода (clear)
passwordField.clear();
//также можно очищать чекбоксы



#Advanced Interactions API
 http://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html


import org.openqa.selenium.interactions.Actions;
//...
new Actions(driver)
    .moveToElement(drag)
    .clickAndHold()
    .moveToElement(drop)
    .release()
    .perform();

Comands:
click
sendKeys
clickAndHold
moveToElement / moveByOffset перемещает мышку на другой элемент  / на указанное расстояние в пикселях
release отпустить кнопку мыши
keyDown нажать клавишу
keyUp отпустить клавишу
contextClick - правая кнопка мыши
doubleClick - двойной
dragAndDrop
pause - вставить паузу!

//если не передавать элемент в скобки то действия будут по текущему элементу
//perform обязательно добавить



#для работы с календарем
Вот метод setDatepicker:

public void setDatepicker(WebDriver driver, String cssSelector, String date) {
  new WebDriverWait(driver, 30000).until(
    (WebDriver d) -> d.findElement(By.cssSelector(cssSelector)).isDisplayed());
  JavascriptExecutor.class.cast(driver).executeScript(
    String.format("$('%s').datepicker('setDate', '%s')", cssSelector, date));
}
А вот пример использования:

WebDriver driver = new FirefoxDriver();
driver.get("http://jqueryui.com/datepicker/");
driver.switchTo().frame(
  driver.findElement(By.cssSelector("iframe.demo-frame")));
setDatepicker(driver, "#datepicker", "02/20/2002");


#для работы с дропдаунами - метод селект
https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/support/ui/Select.html


public void selectFromDropDown(By dropdown, String option) {

        Select select = new Select(driver.findElement(dropdown));
        select.selectByVisibleText(option);
    }








#Ожидания
Явные ожидания(explicitlyWait)- можно ждать чего угодно, а неявные(implicitlyWait) ждут только появления элемента в ДОМ.
Явные ожидания -TimeoutException
Неявные ожидания - NoSuchElementException


#implicitlyWait
takes two arguments — it takes the amount of time to wait, and then it also takes a time unit.

Let's say that we entered 30 and then we say for time unit, we would like seconds.

For the whole project:

driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

Чтобы отключить неявные ожидания для какой-то функии нужно установить значение на 0, потом обратно
FindElement ждет, пока появится элемент
FindElements ждет, пока появится хотя бы один элемент





#ExplicitlyWait

может принимать в качестве параметра другую функцию, которая будет выполняться в цикле. Функция принимает на вход другую функцию(лямбда выражение).

WebDriverWait wait = new WebDriverWait(driver, 10/*seconds*/);
WebElement element2 = wait.until((WebDriver d) -> d.findElement(By.name("q")));



Вместо этого можно использовать класс ExpectedConditions:
WebDriverWait wait = new WebDriverWait(driver, 10/*seconds*/);
WebElement element = wait.until(presenceOfElementLocated(By.name("q")));

#Проверка наличия и отсутствия элемента

#Проверка наличия:
 boolean isElementPresent(WebDriver driver, By locator){
        return driver.findElements(locator).size()>0;
    }


#Проверка отсутствия элемента:
нужно выключить ожидание и потом включить обратно
Лучше избегать такой проверки.

    boolean isNotElementPresent(WebDriver driver, By locator){
        try {
            driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
            return driver.findElements(locator).size() > 0;
        }

        finally{
            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        }
    }


Лучше хранить значение (сколько секунд) в переменной.



#Ожидание исчезновения элемента(обновления)
речь об исчезновении, а не остутсвиии
сначала надо найти, потом ждать исчезновения (обновления)

import static org.openqa.selenium.support.ui.ExpectedConditions.stalenessOf;
// ...

сначала найти элемент, потом:
WebDriverWait wait = new WebDriverWait(driver, 10/*seconds*/);
driver.navigate().refresh();
wait.until(stalenessOf(element));

тоесть если появляется stale element exception, то все хорошо

Такое ожидание нужно, чтобы убедиться, что элементы обновились. Например пагинация- локаторы те же, но элементы другие.


#Ожидание видимости элемента
элемент уже найден:
• wait.until(visibilityOf(element))
• wait.until(visibilityOfAllElements(elementList))
• wait.until(not(visibilityOf(element)))
• wait.until(invisibilityOfAllElements(elementList))
•wait.until(ExpectedConditions.invisibilityOf(
                driver.findElement(loadingIndicator)));
найти элемент и подождать:
• wait.until(visibilityOfElementLocated(locator))


import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOf;
// ...
WebDriverWait wait = new WebDriverWait(driver, 10/*seconds*/);
wait.until(visibilityOf(element));



For the element loading (wait for invisibility of loading indicator in this case):

public void clickStart(){
        driver.findElement(startButton).click();
        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(ExpectedConditions.invisibilityOf(
                driver.findElement(loadingIndicator)));
    }



#Другие условия ожидания

https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/support/ui/ExpectedConditions.html

wait.until(titleIs("webdriver - Поиск в Google"))
• wait.until(urlContains("login.php"))
• wait.until(alertIsPresent())
• wait.until(numberOfWindowsToBe(2))
• wait.until(attributeContains(element, "class", "visible"))
• wait.until(textToBePresentInElement(element, "OK"))
• wait.until(elementToBeSelected(element))
• wait.until(elementToBeClickable(element))



#Ожидание загрузки страницы
Selenium по умолчанию ожидает загрузку страницыю Это нужно менять только в крайних случаях.
Что означает "окончание загрузки страницы"? -- http://barancev.github.io/page-loading-complete/

Как Selenium ожидает окончания загрузки страницы? -- http://barancev.github.io/how-selenium-waits-for-page-to-load/

Что делать, если страница загружается слишком долго? -- http://barancev.github.io/slow-loading-pages/


Бороться с stale element exception: повторять попытки
StaleTolerantWebDriver (Java) -- https://github.com/barancev/decorated-webdriver/tree/master/core/src/main/java/ru/stqa/selenium/decorated/stale

Repeatable Actions (Java) --  https://github.com/barancev/webdriver-repeatable-actions




Configurable fluentwait (how much to wait, hoe often to check, ingnore exceptions)

FluentWait wait = new FluentWait(driver)
    .withTimeout(Duration.ofSeconds(5))
     .pollingEvery(Duration.ofSeconds(1))
     .ignoring(NoSuchElementException.class);

wait.until(ExpectedConditions.invisibilityOf(
        driver.findElement(loadingIndicator)));






 If we do the driver.Manage.timeouts again, let's see what else is here.

 There's also the pageLoadTimeout.
  The pageLoadTimeout allows you to set the amount of time to wait for a page load to complete before it throws an error.
  This is also something that you can add to your script at the project level to say,
 "I would like to wait a certain amount of time for my pages to load."

  Then there's also this setScriptTimeout.
  This will allow you to set the amount of time to wait for asynchronous scripts to finish executing.
  Lots of applications are written in JavaScript and there may be some asynchronous actions happening in the background.
 So, you can set some timeouts using this.



#подсмотренное
сгенерировать рандомный имэйл
 adam"+System.currentTimeMillis()+"@smith.me



Для чего остался Application? Почему там все инициализируется, а не в Page?

#Page Object Model
#Трехуровневая архитектура

В тесте только общие команды типа registerNewCustomer, getIDs..

#Application
Класс Application содержит общие методы типа логина, получения данных
там же инициализируются все страницы
Класс Application инициализируется в TestBase
класс Application управляет страницами

В классе Application registerNewCustomer рзбивается на:
        registrationPage.open();
        registrationPage.firstnameInput.sendKeys(customer.getFirstname());
        registrationPage.lastnameInput.sendKeys(customer.getLastname());

		итд...

В Страницах - локаторы и !методы по взаимодействию с конкретным элементом


#Отделить тестовые данные
можно с помощью создания обьекта (например customer). Для этого в junit есть @DataProvider

public class DataProviders {

    @DataProvider
    public static Object[][] validCustomers() {
        return new Object[][] {
                { Customer.newEntity()
                        .withFirstname("Adam").withLastname("Smith").withPhone("+0123456789")
                        .withAddress("Hidden Place").withPostcode("12345").withCity("New City")
                        .withCountry("US").withZone("KS")
                        .withEmail("adam"+System.currentTimeMillis()+"@smith.me")
                        .withPassword("qwerty").build() },
                /* ... */
        };
    }

}


//А затем в тесте:
	  @UseDataProvider(value = "validCustomers", location = DataProviders.class)


#PageFactory
инициализирует элемент в момент совершения действия с ним

public class RegistrationPage extends Page {

    public RegistrationPage(WebDriver driver) {
        super(driver);
        PageFactory.initElements(driver, this);
    }


    @FindBy(name="firstname")
    public WebElement firstnameInput;

    @FindBy(name="lastname")
    public WebElement lastnameInput;


Можно находить и список элементов:
  @FindBy(css = "table.dataTable tr.row")
    private List<WebElement> customerRows;






#Окна, фреймы и диалоги

#Alert
Alert alert = driver.switchTo().alert();
String alertText = alert.getText();
alert.accept();
// либо alert.dismiss();

Alert alert= wait.until(alertIsPresent())
alert.getText() / alert.sendKeys()
• alert.accept() / alert.dismiss)
• caps.setCapability("unexpectedAlertBehaviour", "dismiss")



#Загрузка файлов на сервер
с помощью sendKeys отправляем адрес файла. В java можно использовать функцию по преобразованию относительного пути в абсолютный

Как прицепить файл к невидимому полю ввода -- http://barancev.github.io/how-to-attach-file-to-invisible-field/


#Окна
Основные операции

Селениум считает активным старое окно, даже если мы видим активным новое открытое окно. Нужно явно переключиться вручную.


//открыть пустое новое окно
• driver.executeScript("window.open()")

//получить список всех окон (возвращает строки с идентификаторами, неупорядоченное множество в случайном порядке)
• driver.getWindowHandles()

//получить текущее окно (идентификатор)
• driver.getCurrentWindowHandle()

//перключится на другое окно по идентификатору
• driver.switchTo().window(handle)

//закрыть текущее окно(после этого нужно переключиться еще на новое)
• driver.close()




String mainWindow = driver.getWindowHandle();
Set<String> oldWindows = driver.getWindowHandles();
link.click(); // открывает новое окно
// ожидание появления нового окна,
// идентификатор которого отсутствует в списке oldWindows (выбрать элемент, который не равен заданному),
// остаётся в качестве самостоятельного упражнения
String newWindow = wait.until(thereIsWindowOtherThan(oldWindows));
driver.switchTo().window(newWindow);
// ...
driver.close();
driver.switchTo().window(mainWindow);



Туда и обратно
// запоминаем идентификатор текущего окна
originalWindow = driver.getWindowHandle()
// запоминаем идентификаторы уже открытых окон
existingWindows= driver.getWindowHandles()

// кликаем кнопку, которая открывает новое окно (или другое нужно действие)
driver.findElement(By.id("button")).click()

// ждем появления нового окна, с новым идентификатором
//wait возвращает идентификатор нового окна
newWindow = wait.until(anyWindowOtherThan(existingWindows))
// переключаемся в новое окно
driver.switchTo().window(newWindow)
// закрываем его
driver.close()
// и возвращаемся в исходное окно!
driver.switchTo().window(originalWindow)




// Ожидание появления нового окна из предыдущего примера
public ExpectedCondition<String> anyWindowOtherThan(Set<String> oldWindows) {
return new ExpectedCondition<String>() {
public String apply(WebDriver driver) {
Set<String> handles = driver.getWindowHandles();
handles.removeAll(oldWindows);
return handles.size() > 0 ? handles.iterator().next() : null;
}
};
}


//Переключиться на окно с нужным тайтлом
  public void switchToTab(String tabTitle){
        var windows = driver.getWindowHandles();

        System.out.println("Number of tabs: " + windows.size());

        System.out.println("Window handles:");
        windows.forEach(System.out::println);

        for(String window : windows){
            System.out.println("Switching to window: " + window);
            driver.switchTo().window(window);

            System.out.println("Current window title: " + driver.getTitle());

            if(tabTitle.equals(driver.getTitle())){
                break;
            }
        }
    }




#Фреймы
driver.switchTo().frame(element)
• driver.switchTo().defaultContent()
• driver.switchTo().parentFrame()


#Размер и положение окна
• driver.manage().window().getPosition()
• driver.manage().window().setPosition(new Point(x, y))
• driver.manage().window().getSize()
• driver.manage().window().setSize(new Dimension(w, h))
• driver.manage().window().maximize()
• driver.manage().window().fullscreen()

Примеры
WebDriver.Window window = driver.manage().window();
window.maximize();
window.setSize(new Dimension(800, 600));


#Команды close и quit
close
закрывает текущее окно
quit
закрывает все окна

close не останавливает вспомогательный файл драйвера
обязательно использовать quit в конце




#Загрузка файлов с сервера
How To Download Files With Selenium And Why You Shouldn’t:
http://ardesco.lazerycode.com/testing/webdriver/2012/07/25/how-to-download-files-with-selenium-and-why-you-shouldnt.html
Три способа
• Настроить браузер на автосохранение
• Загрузить файл «мимо браузера»
• Перехватить загрузку при помощи proxy



#итератор для Листа
// Iterable.forEach() util: Returns a sequential Stream with this collection as its source

        crunchifyList.forEach((temp) -> {
            System.out.println(temp);
        });




#Протоколирование действий Selenium
#EventFiringWebDriver: Java


public static class MyListener extends AbstractWebDriverEventListener {
    @Override
    public void beforeFindBy(By by, WebElement element, WebDriver driver) {
        System.out.println(by);
    }

    @Override
    public void afterFindBy(By by, WebElement element, WebDriver driver) {
        System.out.println(by +  " found");
    }

    @Override
    public void onException(Throwable throwable, WebDriver driver) {
        System.out.println(throwable);
    }
}



//...инициализация драйвера
driver = new EventFiringWebDriver(new ChromeDriver());
driver.register(new MyListener());



#Снятие скриншотов
//снимаем скриншот onException при Протоколировании

File tempFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
try {
  Files.copy(tempFile, new File("screen.png"));
} catch (IOException e) {
  e.printStackTrace();
}

Видеорекордер (Java): https://github.com/SergeyPirogov/video-recorder-java


#Доступ к логам браузера(javascript errors)
for (LogEntry l : driver.manage().logs().get("browser").getAll()) {
    System.out.println(l);
}



#Перехват трафика(proxy)
Proxy proxy = new Proxy();
proxy.setHttpProxy("localhost:8888");
DesiredCapabilities caps = new DesiredCapabilities();
caps.setCapability("proxy", proxy);
WebDriver driver = new ChromeDriver(caps);

//использовать BrowserMobProxy (Java):
https://github.com/lightbody/browsermob-proxy

Что можно делать при помощи прокси:
http://selenium2.ru/articles/106-selenium-i-browsermobproxy-vmeste-veselee.html




#Удалённый запуск

Selenium Server
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), new ChromeOptions());

Selenium Grid
Более старая документация, более подробная, но может содержать неактуальную информацию:
https://github.com/SeleniumHQ/selenium/wiki/Grid2
Более новая документация, пока не очень подробная, но зато должна быть актуальная:
https://seleniumhq.github.io/docs/site/en/grid/

https://github.com/groupon/Selenium-Grid-Extras

Selenium в контейнере
https://github.com/SeleniumHQ/docker-selenium

Selenium в облаках
https://saucelabs.com/
https://www.browserstack.com/
https://testingbot.com/
https://www.gridlastic.com/



#Расширения Selenium

#Драйверы
-браузеры
-псевдобраузеры
-мобильные приложения (в том числе нативные и гибридные) -appium, selenoid, ios-driver
-десктопные виндовс приложения


#Надстройки
Selenide (Java)
• Более удобный / специализированный API
• Неявные ожидания или действия
• Дополнительная функциональность

Protractor (JavaScript) для тестирования приложений на ангуляре
• Более удобный / специализированный API
• Неявные ожидания или действия
• Дополнительная функциональность


#Адаптеры

• Keyword Driven Testing (таблички)-Robot Framework

• Behavior Driven Development (Gherkin)- Cucumber и его многочисленные клоны


